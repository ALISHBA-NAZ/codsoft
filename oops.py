# -*- coding: utf-8 -*-
"""OOPS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t9ZxRgz6WVW13vbmzI-4RB2HOtPGtHPU
"""

#Class Assignments

#Marksheet
class Student:
    marks = []
    def getdata(self,rn ,name, m1, m2, m3, m4, m5):
        Student.rn = rn
        Student.name = name
        Student.marks.append(m1)
        Student.marks.append(m2)
        Student.marks.append(m3)
        Student.marks.append(m4)
        Student.marks.append(m5)

    def displaydata(self):
        print("Roll number is: ", Student.rn)
        print("Name is: ", Student.name)
        print("Marks are:", Student.marks)

    def total(self):
        return (Student.marks[0] + Student.marks[1] + Student.marks[2] +Student.marks[3] + Student.marks[4])

r = int(input("Enter the roll number:"))
name = input("Enter the name:")
m1 = int(input("Enter the marks in first subject:"))
m2 = int(input("Enter the marks in second subject:"))
m3 = int(input("Enter the marks in third subject:"))
m4 = int(input("Enter the marks in fourth subject:"))
m5 = int(input("Enter the marks in fifth subject:"))

s1 = Student()
s1.getdata(r, name, m1, m2, m3, m4, m5)
s1.displaydata()
print("Total marks are:", s1.total())

class Circle:
    PI =3.142

    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return (Circle.PI * self.radius * self.radius)

    def circumference(self):
        return (2 * Circle.PI * self.radius)

r = int(input("enter a radius of circle"))
c1 = Circle(r)
print("Area of c1 circle is : ", c1.area())
print("Circumference of c1 circle is:", c1.circumference())
print("")
r = int(input("enter a radius of circle"))
c2 =Circle(r)
print("Area of c2 circle is : ", c2.area())
print("Circumference of c2 circle is:", c2.circumference())
print("")

def factorial(n):

    factorial =1

    for i in range(n):
        factorial*=i+1

    return factorial

print(factorial(5))

class Calculator:

    def __init__(self,a,b):
        self.a = a
        self.b = b

    def addition(self):
        return self.a + self.b

    def subtraction(self):
        return self.a - self.b

    def multiplication(self):
        return self.a * self.b

    def division(self):
        return self.a // self.b

calc = Calculator(50,9)
print("The value is obtained:", calc.addition())
print("The value is obtained:", calc.subtraction())
print("The value is obtained:", calc.multiplication())
print("The value is obtained:", calc.division())

class Person:
    def __init__(self, name, address):
        self.name = name
        self.address = address

    def introduce(self):
        return (f"My name is {self.name} and I am from {self.address}.")

class Employee(Person):
    def __init__(self, name, address, salary):
        super().__init__(name, address)
        self.salary = salary

    def display_employee_info(self):
        return (f"My salary is: {self.salary}")

class Customer(Person):
    def __init__(self, name, address, customer_type):
        super().__init__(name, address)
        self.customer_type = customer_type

    def display_customer_info(self):
        return (f"Customer type: {self.customer_type}")

# Creating instances of the Employee and Customer classes
employee = Employee("alish", "gulshan iqbal",60000)
customer = Customer("ammar","surjani","regular")


print(employee.introduce())
print(employee.display_employee_info())

print(customer.introduce())
print(customer.display_customer_info())

#Class Activity

'''Define a class Human with properties "first name" and "last name". Define the class Student inheriting Human, which has the property "mark". Define the class Worker inheriting Human with the property "wage" and "hours worked". Implement a "calculate hourly wage" method, which calculates a worker’s hourly pay rate based on wage and hours worked. Write the corresponding constructors and encapsulate all data in properties.'''

class Human:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

class Student(Human):
    def __init__(self, first_name, last_name, mark):
        super().__init__(first_name, last_name)
        self.mark = mark

class Worker(Human):
    def __init__(self, first_name, last_name, wage, hours_worked):
        super().__init__(first_name, last_name)
        self.wage = wage
        self.hours_worked = hours_worked

    def calculate_hourly_wage(self):
        return self.wage / self.hours_worked

worker = Worker("John", "Doe", 100, 40)
print(worker.calculate_hourly_wage())

'''Define an abstract class Shape with abstract method CalculateSurface() and fields width and height. Define two additional classes for a triangle and a rectangle, which implement CalculateSurface(). This method has to return the areas of the rectangle (height*width) and the triangle (height*width/2). Create an array of different shapes and calculate the area of each shape in another array.'''
from abc import ABC, abstractmethod

class Shape(ABC):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    @abstractmethod
    def calculate_surface(self):
        pass

class Triangle(Shape):
    def calculate_surface(self):
        return (self.width * self.height) / 2

class Rectangle(Shape):
    def calculate_surface(self):
        return self.width * self.height

shapes = [Triangle(3, 4), Rectangle(5, 2), Triangle(1, 2)]
areas = []

for shape in shapes:
    areas.append(shape.calculate_surface())

print(f"Areas of shapes: {areas}")

'''Implement the following classes: Dog, Frog, Cat, Kitten and Tomcat. All of them are animals (Animal). Animals are characterized by age, name and gender. Each animal makes a sound (use a virtual method in the Animal class). Create an array of different animals and print on the console their name, age and the corresponding sound each one makesclass Animal:'''
class Animal:
    def __init__(self, age, name, gender):
        self.age = age
        self.name = name
        self.gender = gender

    def sound(self):
        pass

class Dog(Animal):
    def sound(self):
        return "Woof!"

class Frog(Animal):
    def sound(self):
        return "Ribbit!"

class Cat(Animal):
     pass

class Kitten(Cat):
    def sound(self):
        return "Meow!"

class Tomcat(Cat):
    def sound(self):
        return "Mrow!"

animals = [
    Dog(5, "puppy", "Male"),
    Frog(2, "Pepe", "Male"),
    Kitten(1, "Fluffy", "Female"),
    Tomcat(3, "Mano", "Male"),
]

for animal in animals:
    print(f"{animal.name} ({animal.age} years old, {animal.gender}) says: {animal.sound()}")

#Exercises

#Creating a simple class in Python
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        return f"{self.name} says hello!"

dog = Animal("Sheru")
print(dog.speak())

#Creating a subclass (Inheritance)
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        return f"{self.name} says hello!"

class Dog(Animal):
    def speak(self):
        return f"{self.name} barks!"

dog = Dog("Sheru")
print(dog.speak())

#Using the super() function
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        return f"{self.name} says hello!"

class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)
        self.breed = breed

dog = Dog("Sheru", "Bulldog")
print(dog.breed)

#Creating a property
class Circle:
    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        if value >= 0:
            self._radius = value
        else:
            raise ValueError("Radius must be positive")

circle = Circle(5)
print(circle.radius)
circle.radius = 10
print(circle.radius)

#Encapsulation – Private members
class MyClass:
    def __init__(self):
        self.public = "Public"
        self._protected = "Protected"
        self.__private = "Private"

obj = MyClass()
print(obj.public)
print(obj._protected)
print(obj.__private)  # This will raise an AttributeError

#Polymorphism – Using Inbuilt Abstract Base Classes (ABC)
from collections.abc import Iterable

def get_length(item):
    if isinstance(item, Iterable):
        return len(item)
    else:
        return "Not iterable"

print(get_length("Hello"))
print(get_length([1, 2, 3]))
print(get_length(123))

#Defining an Abstract Base Class (ABC)
from abc import ABC, abstractmethod

class AbstractAnimal(ABC):
    @abstractmethod
    def speak(self):
        pass

class Dog(AbstractAnimal):
    def speak(self):
        return "Boww Boww!"

# You can't instantiate an AbstractAnimal
# animal = AbstractAnimal()  # This will raise a TypeError

dog = Dog()
print(dog.speak())

#Using class methods and static methods
class MyClass:
    @classmethod
    def class_method(cls):
        return "Class method called"

    @staticmethod
    def static_method():
        return "Static method called"

print(MyClass.class_method())
print(MyClass.static_method())

#Operator Overloading in Python
class Mango:
    def __init__(self,x):
        self.x = str(x)
    def __add__(self,y):
        return self.x + y.x
obj1 = Mango(7)
obj2 = Mango('mangoes')
print(obj1+obj2)

#Using Special methods for string representations (repr and str)
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f"{self.name} is {self.age} years old."

    def __repr__(self):
        return f"Person('{self.name}', {self.age})"

p = Person("Bob", 30)
print(str(p))
print(repr(p))

#Using composition in Python OOP
class Salary:
    def __init__(self, pay, bonus):
        self.pay = pay
        self.bonus = bonus

class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary

s = Salary(15000, 5000)
e = Employee("Ashwin", s)
print(e.salary.pay)

#Using multiple inheritance
class Parent1:
    def method1(self):
        return "Parent1's method called"

class Parent2:
    def method2(self):
        return "Parent2's method called"

class Child(Parent1, Parent2):
    pass

c = Child()
print(c.method1())
print(c.method2())

#Implementing Decorators within classes
class MyClass:
    @staticmethod
    def method():
        return "Static method called"

    @classmethod
    def classmethod(cls):
        return "Class method called"

print(MyClass.method())
print(MyClass.classmethod())

#Creating a Singleton class in Python
#A singleton class allows the creation of only one instance of itself.

class Singleton:
    _instance = None

    @staticmethod
    def getInstance():
        if Singleton._instance == None:
            Singleton()
        return Singleton._instance

    def __init__(self):
        if Singleton._instance != None:
            raise Exception("This class is a singleton!")
        else:
            Singleton._instance = self

s = Singleton.getInstance()
print(s)

#Using Mixin classes in Python
#Ezoic
#A mixin class provides methods to other classes, but it is not considered a parent class itself.

class Mixin1(object):
    def test(self):
        print("Mixin1")

class Mixin2(object):
    def test(self):
        print("Mixin2")

class MyClass(Mixin1, Mixin2):
    pass

obj = MyClass()
obj.test()



class Student:
    def __init__(self, student_id, name, gender, birthdate, image_path):
        self.student_id = student_id
        self.name = name
        self.gender = gender
        self.birthdate = birthdate
        self.image_path = image_path

class StudentDatabase:
    def __init__(self):
        self.students = []

    def add_student(self, student):
        # Add a new student to the database
        self.students.append(student)

    def remove_student(self, student_id):
        # Remove a student from the database based on ID
        self.students = [s for s in self.students if s.student_id != student_id]

    def get_all_students(self):
        # Return a list of all students in the database
        return self.students

class StudentForm:
    def __init__(self):
        pass  # Add necessary initialization code for the form

    def add_student_form(self):
        # Logic for the "Add Student Form"
        pass

    def students_list_form(self):
        # Logic for the "Students List Form"
        pass

    def update_delete_student_form(self):
        # Logic for the "Update Delete Student Form"
        pass

    def students_statics_form(self):
        # Logic for the "Students Statics Form"
        pass

    def manage_students_form(self):
        # Logic for the "Manage Students Form"
        pass

    def print_students_form(self):
        # Logic for the "Print Students Form"
        pass

# Create an instance of the StudentDatabase
student_db = StudentDatabase()

# Example: Add a new student
new_student = Student(student_id=1, name='John Doe', gender='Male', birthdate='2000-01-01', image_path='path/to/image.jpg')
student_db.add_student(new_student)

# Example: Get all students from the database
all_students = student_db.get_all_students()
for student in all_students:
    print(f"Student ID: {student.student_id}, Name: {student.name}, Gender: {student.gender}")

import tkinter as tk
from tkinter import ttk, messagebox

class StudentInformationSystem:
    def __init__(self, root):
        self.root = root
        self.root.title("Student Information System")

        # Login Form
        self.login_frame = tk.Frame(self.root)
        # Add login widgets and functionality here
        self.login_frame.pack()

        # Main Form
        self.main_notebook = ttk.Notebook(self.root)

        # Students Section
        self.students_frame = tk.Frame(self.main_notebook)
        # Add widgets for Students Section

        # Courses Section
        self.courses_frame = tk.Frame(self.main_notebook)
        # Add widgets for Courses Section

        # Scores Section
        self.scores_frame = tk.Frame(self.main_notebook)
        # Add widgets for Scores Section

        # Add all frames to the notebook
        self.main_notebook.add(self.students_frame, text="Students")
        self.main_notebook.add(self.courses_frame, text="Courses")
        self.main_notebook.add(self.scores_frame, text="Scores")

        self.main_notebook.pack(expand=1, fill="both")

    def login(self):
        # Add login functionality
        pass

    # Add functions for Students, Courses, Scores sections

if __name__ == "__main__":
    root = tk.Tk()
    app = StudentInformationSystem(root)
    root.mainloop()

